import os
import json
from slack_bolt import App
from slack_sdk.web import WebClient
from slack_bolt.adapter.flask import SlackRequestHandler

import openai

# Initialize a Bolt for Python app
app = App(
    token=os.environ.get("SLACK_BOT_TOKEN"),
    signing_secret=os.environ.get("SLACK_SIGNING_SECRET"),
)

@app.event("app_mention")
async def handle_app_mentions(body, say):
    print("HI JC!!! we got into the handler")
    user = body["user"]
    text = body["text"]

    # Call GPT-4 API
    prompt = f"Generate a funny and irreverent response to the following message: {text}"
    response = openai.Completion.create(engine="text-davinci-002", prompt=prompt, max_tokens=50, n=1, stop=None, temperature=0.7)

    # Extract the generated response
    generated_response = response.choices[0].text.strip()
    print("HI JC!!! here's generated_response: ", generated_response)

    # Respond to the user
    say(f"{generated_response}")

handler = SlackRequestHandler(app)
import asyncio

def lambda_handler(event, context):
    # Parse the incoming request
    print("HI JC!! we're logging!!", event['event'])

    # URL Verification Challenge
    if "challenge" in event['event']:
        return {
            'statusCode': 200,
            'body': event["event"]["challenge"],
            'headers': {
                'Content-Type': 'text/plain',
            }
        }

    # Process incoming Slack events
    else:
        # Check if the event type is an "app_mention"
        if event['event']['type'] == 'app_mention':
            print("HI JC! got one more level deeper into the code")
            # If so, call your handle_app_mentions function
            # But because it's an async function, we need to create a new event loop and run the function in it
            loop = asyncio.get_event_loop()
            response = loop.run_until_complete(handle_app_mentions(event['event'], None))
            
            # Return the response generated by the Bolt app
            return {
                'statusCode': 200,
                'body': response,
                'headers': {
                    'Content-Type': 'application/json',
                }
            }
        else:
            return {
                'statusCode': 200,
                'body': "No 'app_mention' event in the request.",
                'headers': {
                    'Content-Type': 'text/plain',
                }
            }
